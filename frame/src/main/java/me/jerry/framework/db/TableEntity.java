package me.jerry.framework.db;import java.io.Serializable;import java.lang.reflect.Field;/** * 数据模型类的基类 * 其中使用{@link Column}标记的变量均对应数据库字段，变量命名采用驼峰式命名，对应数据库中下划线命名的字段 * 支持的字段类型有Integer, Short, Long, String, byte[], Float, Double * 字段类型映射解析已移到{@link Dao}中 * @version 1.1 */public abstract class TableEntity implements Serializable, Cloneable {    private static final long serialVersionUID = -2018151805278451906L;    protected Dao mDao;    /** primary key **/    @Column()    protected Integer id = -1;    public int getId() {        return id;    }    public void setId(int id) {        this.id = id;    }    public String toString(){        StringBuilder sb = new StringBuilder();        Field[] fields = getClass().getDeclaredFields();        sb.append(getClass().getSimpleName()).append("{ ");        sb.append("id = " + id).append("; ");        for(Field field : fields) {            if(field.getAnnotation(Column.class) != null) {                field.setAccessible(true);                try {                    String value;                    if(field.getType() == byte[].class) {                        StringBuilder builder = new StringBuilder();                        builder.append("[");                        for(byte b : (byte[])field.get(this)){                            builder.append(b).append(",");                        }                        value = builder.replace(builder.length() - 1, builder.length(), "]").toString();                    } else {                        value = field.get(this).toString();                    }                    sb.append(field.getName()).append(" = ").append(value).append("; ");                } catch (IllegalAccessException e) {                    e.printStackTrace();                }            }        }        sb.append(" }");        return sb.toString();    }}