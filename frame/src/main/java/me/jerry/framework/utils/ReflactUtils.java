package me.jerry.framework.utils;import java.lang.reflect.Field;import java.lang.reflect.InvocationTargetException;import java.lang.reflect.Method;public class ReflactUtils {	@SuppressWarnings({ "rawtypes", "unchecked" })	public static Field[] getFieldsWithSuper(Class clazz, Class rootSuper) {		if(!rootSuper.isAssignableFrom(clazz)) {			return null;		}		Field[] fields = new Field[0];		Class temp = clazz;		do {			Field[] a = temp.getDeclaredFields();			Field[] total = new Field[fields.length + a.length];			System.arraycopy(fields, 0, total, 0, fields.length);			System.arraycopy(a, 0, total, fields.length, a.length);			fields = total;		} while((temp = temp.getSuperclass()) != rootSuper);		Field[] a = temp.getDeclaredFields();		Field[] total = new Field[fields.length + a.length];		System.arraycopy(fields, 0, total, 0, fields.length);		System.arraycopy(a, 0, total, fields.length, a.length);		fields = total;		return fields;	}	@SuppressWarnings("unchecked")	public static <T> T invokeStaticMethod(Class<?> clazz, String methodName, Object... args) {		Class<?>[] types = new Class[args.length];		for(int i = 0; i < types.length; i ++) {			types[i] = args[i].getClass();		}		try {			Method method = clazz.getDeclaredMethod(methodName, types);			method.setAccessible(true);			return (T) method.invoke(null, args);		} catch (NoSuchMethodException e) {			e.printStackTrace();		} catch (IllegalAccessException e) {			e.printStackTrace();		} catch (IllegalArgumentException e) {			e.printStackTrace();		} catch (InvocationTargetException e) {			e.printStackTrace();		}		return null;	}	@SuppressWarnings("unchecked")	public static <T> T invoke(Object receiver, String methodName, Object... args) {		Class<?>[] types = new Class[args.length];		for(int i = 0; i < types.length; i ++) {			types[i] = args[i].getClass();		}		try {			Method method = receiver.getClass().getDeclaredMethod(methodName, types);			method.setAccessible(true);			return (T) method.invoke(receiver, args);		} catch (NoSuchMethodException e) {			e.printStackTrace();		} catch (IllegalAccessException e) {			e.printStackTrace();		} catch (IllegalArgumentException e) {			e.printStackTrace();		} catch (InvocationTargetException e) {			e.printStackTrace();		}		return null;	}	@SuppressWarnings("unchecked")	public static <T> T getFieldValue(Class<?> clazz, Object receiver, String fieldName) {		Field field;		try {			field = clazz.getDeclaredField(fieldName);			field.setAccessible(true);			return (T)field.get(receiver);		} catch (NoSuchFieldException e) {			e.printStackTrace();		} catch (IllegalAccessException e) {			e.printStackTrace();		} catch (IllegalArgumentException e) {			e.printStackTrace();		}		return null;	}	@SuppressWarnings("unchecked")	public static <T> T getStaticFieldValue(Class<?> clazz, String fieldName) {		Field field;		try {			field = clazz.getDeclaredField(fieldName);			field.setAccessible(true);			return (T)field.get(null);		} catch (NoSuchFieldException e) {			e.printStackTrace();		} catch (IllegalAccessException e) {			e.printStackTrace();		} catch (IllegalArgumentException e) {			e.printStackTrace();		}		return null;	}	public static void setFieldValue(Class<?> clazz, Object receiver, String fieldName, Object value) {		Field field;		try {			field = clazz.getDeclaredField(fieldName);			field.setAccessible(true);			field.set(receiver, value);		} catch (NoSuchFieldException e) {			e.printStackTrace();		} catch (IllegalAccessException e) {			e.printStackTrace();		} catch (IllegalArgumentException e) {			e.printStackTrace();		}	}	public static void setStaticFieldValue(Class<?> clazz, String fieldName, Object value) {		Field field;		try {			field = clazz.getDeclaredField(fieldName);			field.setAccessible(true);			field.set(null, value);		} catch (NoSuchFieldException e) {			e.printStackTrace();		} catch (IllegalAccessException e) {			e.printStackTrace();		} catch (IllegalArgumentException e) {			e.printStackTrace();		}	}}